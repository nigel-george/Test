/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Restaurant as PrismaRestaurant,
  RestaurantPhoto as PrismaRestaurantPhoto,
  RestaurantWorkingHour as PrismaRestaurantWorkingHour,
  Tag as PrismaTag,
  UserFavoriteRestaurant as PrismaUserFavoriteRestaurant,
  UserInteraction as PrismaUserInteraction,
} from "@prisma/client";

import { Restaurant } from "./Restaurant";

export class RestaurantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurant.count(args);
  }

  async restaurants<T extends Prisma.RestaurantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantFindManyArgs>
  ): Promise<PrismaRestaurant[]> {
    return this.prisma.restaurant.findMany<Prisma.RestaurantFindManyArgs>(args);
  }
  async restaurant<T extends Prisma.RestaurantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantFindUniqueArgs>
  ): Promise<PrismaRestaurant | null> {
    return this.prisma.restaurant.findUnique(args);
  }
  async createRestaurant<T extends Prisma.RestaurantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantCreateArgs>
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.create<T>(args);
  }
  async updateRestaurant<T extends Prisma.RestaurantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantUpdateArgs>
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.update<T>(args);
  }
  async deleteRestaurant<T extends Prisma.RestaurantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantDeleteArgs>
  ): Promise<PrismaRestaurant> {
    return this.prisma.restaurant.delete(args);
  }

  async findRestaurantPhotos(
    parentId: string,
    args: Prisma.RestaurantPhotoFindManyArgs
  ): Promise<PrismaRestaurantPhoto[]> {
    return this.prisma.restaurant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .restaurantPhotos(args);
  }

  async findRestaurantWorkingHours(
    parentId: string,
    args: Prisma.RestaurantWorkingHourFindManyArgs
  ): Promise<PrismaRestaurantWorkingHour[]> {
    return this.prisma.restaurant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .restaurantWorkingHours(args);
  }

  async findTags(
    parentId: string,
    args: Prisma.TagFindManyArgs
  ): Promise<PrismaTag[]> {
    return this.prisma.restaurant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tags(args);
  }

  async findUserFavoriteRestaurants(
    parentId: string,
    args: Prisma.UserFavoriteRestaurantFindManyArgs
  ): Promise<PrismaUserFavoriteRestaurant[]> {
    return this.prisma.restaurant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userFavoriteRestaurants(args);
  }

  async findUserInteractions(
    parentId: string,
    args: Prisma.UserInteractionFindManyArgs
  ): Promise<PrismaUserInteraction[]> {
    return this.prisma.restaurant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userInteractions(args);
  }
  async GetNearbyRestaurants(args: string): Promise<Restaurant[]> {
    throw new Error("Not implemented");
  }
  async GetRestaurantDetails(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async GetSavedRestaurants(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}

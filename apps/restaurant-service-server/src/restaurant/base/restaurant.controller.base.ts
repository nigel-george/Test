/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { RestaurantService } from "../restaurant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RestaurantCreateInput } from "./RestaurantCreateInput";
import { Restaurant } from "./Restaurant";
import { RestaurantFindManyArgs } from "./RestaurantFindManyArgs";
import { RestaurantWhereUniqueInput } from "./RestaurantWhereUniqueInput";
import { RestaurantUpdateInput } from "./RestaurantUpdateInput";
import { RestaurantPhotoFindManyArgs } from "../../restaurantPhoto/base/RestaurantPhotoFindManyArgs";
import { RestaurantPhoto } from "../../restaurantPhoto/base/RestaurantPhoto";
import { RestaurantPhotoWhereUniqueInput } from "../../restaurantPhoto/base/RestaurantPhotoWhereUniqueInput";
import { RestaurantWorkingHourFindManyArgs } from "../../restaurantWorkingHour/base/RestaurantWorkingHourFindManyArgs";
import { RestaurantWorkingHour } from "../../restaurantWorkingHour/base/RestaurantWorkingHour";
import { RestaurantWorkingHourWhereUniqueInput } from "../../restaurantWorkingHour/base/RestaurantWorkingHourWhereUniqueInput";
import { TagFindManyArgs } from "../../tag/base/TagFindManyArgs";
import { Tag } from "../../tag/base/Tag";
import { TagWhereUniqueInput } from "../../tag/base/TagWhereUniqueInput";
import { UserFavoriteRestaurantFindManyArgs } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurantFindManyArgs";
import { UserFavoriteRestaurant } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurant";
import { UserFavoriteRestaurantWhereUniqueInput } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurantWhereUniqueInput";
import { UserInteractionFindManyArgs } from "../../userInteraction/base/UserInteractionFindManyArgs";
import { UserInteraction } from "../../userInteraction/base/UserInteraction";
import { UserInteractionWhereUniqueInput } from "../../userInteraction/base/UserInteractionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class RestaurantControllerBase {
  constructor(
    protected readonly service: RestaurantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Restaurant })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createRestaurant(
    @common.Body() data: RestaurantCreateInput
  ): Promise<Restaurant> {
    return await this.service.createRestaurant({
      data: data,
      select: {
        affordability: true,
        contact: true,
        createdAt: true,
        createDate: true,
        email: true,
        fullAddress: true,
        id: true,
        isRegistered: true,
        latitude: true,
        longitude: true,
        name: true,
        placeId: true,
        rating: true,
        totalReviews: true,
        updatedAt: true,
        updateDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Restaurant] })
  @ApiNestedQuery(RestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurants(@common.Req() request: Request): Promise<Restaurant[]> {
    const args = plainToClass(RestaurantFindManyArgs, request.query);
    return this.service.restaurants({
      ...args,
      select: {
        affordability: true,
        contact: true,
        createdAt: true,
        createDate: true,
        email: true,
        fullAddress: true,
        id: true,
        isRegistered: true,
        latitude: true,
        longitude: true,
        name: true,
        placeId: true,
        rating: true,
        totalReviews: true,
        updatedAt: true,
        updateDate: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async restaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    const result = await this.service.restaurant({
      where: params,
      select: {
        affordability: true,
        contact: true,
        createdAt: true,
        createDate: true,
        email: true,
        fullAddress: true,
        id: true,
        isRegistered: true,
        latitude: true,
        longitude: true,
        name: true,
        placeId: true,
        rating: true,
        totalReviews: true,
        updatedAt: true,
        updateDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() data: RestaurantUpdateInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.updateRestaurant({
        where: params,
        data: data,
        select: {
          affordability: true,
          contact: true,
          createdAt: true,
          createDate: true,
          email: true,
          fullAddress: true,
          id: true,
          isRegistered: true,
          latitude: true,
          longitude: true,
          name: true,
          placeId: true,
          rating: true,
          totalReviews: true,
          updatedAt: true,
          updateDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Restaurant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteRestaurant(
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Restaurant | null> {
    try {
      return await this.service.deleteRestaurant({
        where: params,
        select: {
          affordability: true,
          contact: true,
          createdAt: true,
          createDate: true,
          email: true,
          fullAddress: true,
          id: true,
          isRegistered: true,
          latitude: true,
          longitude: true,
          name: true,
          placeId: true,
          rating: true,
          totalReviews: true,
          updatedAt: true,
          updateDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantPhotos")
  @ApiNestedQuery(RestaurantPhotoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "read",
    possession: "any",
  })
  async findRestaurantPhotos(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantPhoto[]> {
    const query = plainToClass(RestaurantPhotoFindManyArgs, request.query);
    const results = await this.service.findRestaurantPhotos(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        photoUrl: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantPhotos")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantPhotos(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPhotos: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantPhotos")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantPhotos(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPhotos: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantPhotos")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantPhotos(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantPhotoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantPhotos: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/restaurantWorkingHours")
  @ApiNestedQuery(RestaurantWorkingHourFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RestaurantWorkingHour",
    action: "read",
    possession: "any",
  })
  async findRestaurantWorkingHours(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<RestaurantWorkingHour[]> {
    const query = plainToClass(
      RestaurantWorkingHourFindManyArgs,
      request.query
    );
    const results = await this.service.findRestaurantWorkingHours(params.id, {
      ...query,
      select: {
        closingTime: true,
        createdAt: true,
        dayOfWeek: true,
        id: true,
        isClosed: true,
        openingTime: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/restaurantWorkingHours")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectRestaurantWorkingHours(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantWorkingHourWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantWorkingHours: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/restaurantWorkingHours")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateRestaurantWorkingHours(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantWorkingHourWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantWorkingHours: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/restaurantWorkingHours")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectRestaurantWorkingHours(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: RestaurantWorkingHourWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      restaurantWorkingHours: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/tags")
  @ApiNestedQuery(TagFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tag",
    action: "read",
    possession: "any",
  })
  async findTags(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<Tag[]> {
    const query = plainToClass(TagFindManyArgs, request.query);
    const results = await this.service.findTags(params.id, {
      ...query,
      select: {
        address: true,
        ambience: true,
        createdAt: true,
        id: true,
        isCorrect: true,
        mainTag: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        restaurantName: true,
        subTags: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tags")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectTags(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tags")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateTags(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tags")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectTags(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: TagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tags: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userFavoriteRestaurants")
  @ApiNestedQuery(UserFavoriteRestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteRestaurants(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<UserFavoriteRestaurant[]> {
    const query = plainToClass(
      UserFavoriteRestaurantFindManyArgs,
      request.query
    );
    const results = await this.service.findUserFavoriteRestaurants(params.id, {
      ...query,
      select: {
        createdAt: true,
        createDate: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        updateDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectUserFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateUserFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectUserFavoriteRestaurants(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userInteractions")
  @ApiNestedQuery(UserInteractionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserInteraction",
    action: "read",
    possession: "any",
  })
  async findUserInteractions(
    @common.Req() request: Request,
    @common.Param() params: RestaurantWhereUniqueInput
  ): Promise<UserInteraction[]> {
    const query = plainToClass(UserInteractionFindManyArgs, request.query);
    const results = await this.service.findUserInteractions(params.id, {
      ...query,
      select: {
        createdAt: true,
        deviceType: true,
        id: true,
        interactionTimestamp: true,
        interactionType: true,
        ipAddress: true,
        latitude: true,
        longitude: true,
        offerId: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async connectUserInteractions(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        connect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async updateUserInteractions(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        set: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "update",
    possession: "any",
  })
  async disconnectUserInteractions(
    @common.Param() params: RestaurantWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        disconnect: body,
      },
    };
    await this.service.updateRestaurant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/restaurants/nearby")
  @swagger.ApiOkResponse({
    type: Restaurant,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetNearbyRestaurants(
    @common.Body()
    body: string
  ): Promise<Restaurant[]> {
    return this.service.GetNearbyRestaurants(body);
  }

  @common.Get("/:id/get-restaurant-details")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetRestaurantDetails(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetRestaurantDetails(body);
  }

  @common.Get("/:id/get-saved-restaurants")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSavedRestaurants(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetSavedRestaurants(body);
  }
}

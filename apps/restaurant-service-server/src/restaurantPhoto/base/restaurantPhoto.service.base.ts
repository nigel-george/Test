/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  RestaurantPhoto as PrismaRestaurantPhoto,
  Restaurant as PrismaRestaurant,
} from "@prisma/client";

export class RestaurantPhotoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RestaurantPhotoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.restaurantPhoto.count(args);
  }

  async restaurantPhotos<T extends Prisma.RestaurantPhotoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantPhotoFindManyArgs>
  ): Promise<PrismaRestaurantPhoto[]> {
    return this.prisma.restaurantPhoto.findMany<Prisma.RestaurantPhotoFindManyArgs>(
      args
    );
  }
  async restaurantPhoto<T extends Prisma.RestaurantPhotoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantPhotoFindUniqueArgs>
  ): Promise<PrismaRestaurantPhoto | null> {
    return this.prisma.restaurantPhoto.findUnique(args);
  }
  async createRestaurantPhoto<T extends Prisma.RestaurantPhotoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantPhotoCreateArgs>
  ): Promise<PrismaRestaurantPhoto> {
    return this.prisma.restaurantPhoto.create<T>(args);
  }
  async updateRestaurantPhoto<T extends Prisma.RestaurantPhotoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantPhotoUpdateArgs>
  ): Promise<PrismaRestaurantPhoto> {
    return this.prisma.restaurantPhoto.update<T>(args);
  }
  async deleteRestaurantPhoto<T extends Prisma.RestaurantPhotoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RestaurantPhotoDeleteArgs>
  ): Promise<PrismaRestaurantPhoto> {
    return this.prisma.restaurantPhoto.delete(args);
  }

  async getRestaurant(parentId: string): Promise<PrismaRestaurant | null> {
    return this.prisma.restaurantPhoto
      .findUnique({
        where: { id: parentId },
      })
      .restaurant();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RestaurantPhoto } from "./RestaurantPhoto";
import { RestaurantPhotoCountArgs } from "./RestaurantPhotoCountArgs";
import { RestaurantPhotoFindManyArgs } from "./RestaurantPhotoFindManyArgs";
import { RestaurantPhotoFindUniqueArgs } from "./RestaurantPhotoFindUniqueArgs";
import { CreateRestaurantPhotoArgs } from "./CreateRestaurantPhotoArgs";
import { UpdateRestaurantPhotoArgs } from "./UpdateRestaurantPhotoArgs";
import { DeleteRestaurantPhotoArgs } from "./DeleteRestaurantPhotoArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { RestaurantPhotoService } from "../restaurantPhoto.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RestaurantPhoto)
export class RestaurantPhotoResolverBase {
  constructor(
    protected readonly service: RestaurantPhotoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "read",
    possession: "any",
  })
  async _restaurantPhotosMeta(
    @graphql.Args() args: RestaurantPhotoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RestaurantPhoto])
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "read",
    possession: "any",
  })
  async restaurantPhotos(
    @graphql.Args() args: RestaurantPhotoFindManyArgs
  ): Promise<RestaurantPhoto[]> {
    return this.service.restaurantPhotos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RestaurantPhoto, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "read",
    possession: "own",
  })
  async restaurantPhoto(
    @graphql.Args() args: RestaurantPhotoFindUniqueArgs
  ): Promise<RestaurantPhoto | null> {
    const result = await this.service.restaurantPhoto(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantPhoto)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "create",
    possession: "any",
  })
  async createRestaurantPhoto(
    @graphql.Args() args: CreateRestaurantPhotoArgs
  ): Promise<RestaurantPhoto> {
    return await this.service.createRestaurantPhoto({
      ...args,
      data: {
        ...args.data,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RestaurantPhoto)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "update",
    possession: "any",
  })
  async updateRestaurantPhoto(
    @graphql.Args() args: UpdateRestaurantPhotoArgs
  ): Promise<RestaurantPhoto | null> {
    try {
      return await this.service.updateRestaurantPhoto({
        ...args,
        data: {
          ...args.data,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RestaurantPhoto)
  @nestAccessControl.UseRoles({
    resource: "RestaurantPhoto",
    action: "delete",
    possession: "any",
  })
  async deleteRestaurantPhoto(
    @graphql.Args() args: DeleteRestaurantPhotoArgs
  ): Promise<RestaurantPhoto | null> {
    try {
      return await this.service.deleteRestaurantPhoto(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurant(
    @graphql.Parent() parent: RestaurantPhoto
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserFavoriteRestaurant } from "./UserFavoriteRestaurant";
import { UserFavoriteRestaurantCountArgs } from "./UserFavoriteRestaurantCountArgs";
import { UserFavoriteRestaurantFindManyArgs } from "./UserFavoriteRestaurantFindManyArgs";
import { UserFavoriteRestaurantFindUniqueArgs } from "./UserFavoriteRestaurantFindUniqueArgs";
import { CreateUserFavoriteRestaurantArgs } from "./CreateUserFavoriteRestaurantArgs";
import { UpdateUserFavoriteRestaurantArgs } from "./UpdateUserFavoriteRestaurantArgs";
import { DeleteUserFavoriteRestaurantArgs } from "./DeleteUserFavoriteRestaurantArgs";
import { Restaurant } from "../../restaurant/base/Restaurant";
import { User } from "../../user/base/User";
import { UserFavoriteRestaurantService } from "../userFavoriteRestaurant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserFavoriteRestaurant)
export class UserFavoriteRestaurantResolverBase {
  constructor(
    protected readonly service: UserFavoriteRestaurantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "read",
    possession: "any",
  })
  async _userFavoriteRestaurantsMeta(
    @graphql.Args() args: UserFavoriteRestaurantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserFavoriteRestaurant])
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "read",
    possession: "any",
  })
  async userFavoriteRestaurants(
    @graphql.Args() args: UserFavoriteRestaurantFindManyArgs
  ): Promise<UserFavoriteRestaurant[]> {
    return this.service.userFavoriteRestaurants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserFavoriteRestaurant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "read",
    possession: "own",
  })
  async userFavoriteRestaurant(
    @graphql.Args() args: UserFavoriteRestaurantFindUniqueArgs
  ): Promise<UserFavoriteRestaurant | null> {
    const result = await this.service.userFavoriteRestaurant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFavoriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "create",
    possession: "any",
  })
  async createUserFavoriteRestaurant(
    @graphql.Args() args: CreateUserFavoriteRestaurantArgs
  ): Promise<UserFavoriteRestaurant> {
    return await this.service.createUserFavoriteRestaurant({
      ...args,
      data: {
        ...args.data,

        restaurant: args.data.restaurant
          ? {
              connect: args.data.restaurant,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserFavoriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "update",
    possession: "any",
  })
  async updateUserFavoriteRestaurant(
    @graphql.Args() args: UpdateUserFavoriteRestaurantArgs
  ): Promise<UserFavoriteRestaurant | null> {
    try {
      return await this.service.updateUserFavoriteRestaurant({
        ...args,
        data: {
          ...args.data,

          restaurant: args.data.restaurant
            ? {
                connect: args.data.restaurant,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFavoriteRestaurant)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "delete",
    possession: "any",
  })
  async deleteUserFavoriteRestaurant(
    @graphql.Args() args: DeleteUserFavoriteRestaurantArgs
  ): Promise<UserFavoriteRestaurant | null> {
    try {
      return await this.service.deleteUserFavoriteRestaurant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Restaurant, {
    nullable: true,
    name: "restaurant",
  })
  @nestAccessControl.UseRoles({
    resource: "Restaurant",
    action: "read",
    possession: "any",
  })
  async getRestaurant(
    @graphql.Parent() parent: UserFavoriteRestaurant
  ): Promise<Restaurant | null> {
    const result = await this.service.getRestaurant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UserFavoriteRestaurant
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { UserFavoriteRestaurantFindManyArgs } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurantFindManyArgs";
import { UserFavoriteRestaurant } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurant";
import { UserFavoriteRestaurantWhereUniqueInput } from "../../userFavoriteRestaurant/base/UserFavoriteRestaurantWhereUniqueInput";
import { UserInteractionFindManyArgs } from "../../userInteraction/base/UserInteractionFindManyArgs";
import { UserInteraction } from "../../userInteraction/base/UserInteraction";
import { UserInteractionWhereUniqueInput } from "../../userInteraction/base/UserInteractionWhereUniqueInput";
import { UserSearchHistoryFindManyArgs } from "../../userSearchHistory/base/UserSearchHistoryFindManyArgs";
import { UserSearchHistory } from "../../userSearchHistory/base/UserSearchHistory";
import { UserSearchHistoryWhereUniqueInput } from "../../userSearchHistory/base/UserSearchHistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        roles: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          roles: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userFavoriteRestaurants")
  @ApiNestedQuery(UserFavoriteRestaurantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserFavoriteRestaurant",
    action: "read",
    possession: "any",
  })
  async findUserFavoriteRestaurants(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserFavoriteRestaurant[]> {
    const query = plainToClass(
      UserFavoriteRestaurantFindManyArgs,
      request.query
    );
    const results = await this.service.findUserFavoriteRestaurants(params.id, {
      ...query,
      select: {
        createdAt: true,
        createDate: true,
        id: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        updateDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserFavoriteRestaurants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserFavoriteRestaurants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userFavoriteRestaurants")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserFavoriteRestaurants(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserFavoriteRestaurantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userFavoriteRestaurants: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userInteractions")
  @ApiNestedQuery(UserInteractionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserInteraction",
    action: "read",
    possession: "any",
  })
  async findUserInteractions(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserInteraction[]> {
    const query = plainToClass(UserInteractionFindManyArgs, request.query);
    const results = await this.service.findUserInteractions(params.id, {
      ...query,
      select: {
        createdAt: true,
        deviceType: true,
        id: true,
        interactionTimestamp: true,
        interactionType: true,
        ipAddress: true,
        latitude: true,
        longitude: true,
        offerId: true,

        restaurant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserInteractions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserInteractions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userInteractions")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserInteractions(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserInteractionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInteractions: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userSearchHistories")
  @ApiNestedQuery(UserSearchHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "any",
  })
  async findUserSearchHistories(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserSearchHistory[]> {
    const query = plainToClass(UserSearchHistoryFindManyArgs, request.query);
    const results = await this.service.findUserSearchHistories(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        searchIp: true,
        searchLocation: true,
        searchQuery: true,
        searchTimestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userSearchHistories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserSearchHistories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSearchHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSearchHistories: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userSearchHistories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserSearchHistories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSearchHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSearchHistories: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userSearchHistories")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserSearchHistories(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserSearchHistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSearchHistories: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}

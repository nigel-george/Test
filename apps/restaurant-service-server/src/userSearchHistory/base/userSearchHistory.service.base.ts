/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserSearchHistory as PrismaUserSearchHistory,
  User as PrismaUser,
} from "@prisma/client";

export class UserSearchHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserSearchHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userSearchHistory.count(args);
  }

  async userSearchHistories<T extends Prisma.UserSearchHistoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSearchHistoryFindManyArgs>
  ): Promise<PrismaUserSearchHistory[]> {
    return this.prisma.userSearchHistory.findMany<Prisma.UserSearchHistoryFindManyArgs>(
      args
    );
  }
  async userSearchHistory<T extends Prisma.UserSearchHistoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSearchHistoryFindUniqueArgs>
  ): Promise<PrismaUserSearchHistory | null> {
    return this.prisma.userSearchHistory.findUnique(args);
  }
  async createUserSearchHistory<T extends Prisma.UserSearchHistoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSearchHistoryCreateArgs>
  ): Promise<PrismaUserSearchHistory> {
    return this.prisma.userSearchHistory.create<T>(args);
  }
  async updateUserSearchHistory<T extends Prisma.UserSearchHistoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSearchHistoryUpdateArgs>
  ): Promise<PrismaUserSearchHistory> {
    return this.prisma.userSearchHistory.update<T>(args);
  }
  async deleteUserSearchHistory<T extends Prisma.UserSearchHistoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserSearchHistoryDeleteArgs>
  ): Promise<PrismaUserSearchHistory> {
    return this.prisma.userSearchHistory.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userSearchHistory
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

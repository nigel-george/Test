/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserSearchHistory } from "./UserSearchHistory";
import { UserSearchHistoryCountArgs } from "./UserSearchHistoryCountArgs";
import { UserSearchHistoryFindManyArgs } from "./UserSearchHistoryFindManyArgs";
import { UserSearchHistoryFindUniqueArgs } from "./UserSearchHistoryFindUniqueArgs";
import { CreateUserSearchHistoryArgs } from "./CreateUserSearchHistoryArgs";
import { UpdateUserSearchHistoryArgs } from "./UpdateUserSearchHistoryArgs";
import { DeleteUserSearchHistoryArgs } from "./DeleteUserSearchHistoryArgs";
import { User } from "../../user/base/User";
import { UserSearchHistoryService } from "../userSearchHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserSearchHistory)
export class UserSearchHistoryResolverBase {
  constructor(
    protected readonly service: UserSearchHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "any",
  })
  async _userSearchHistoriesMeta(
    @graphql.Args() args: UserSearchHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserSearchHistory])
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "any",
  })
  async userSearchHistories(
    @graphql.Args() args: UserSearchHistoryFindManyArgs
  ): Promise<UserSearchHistory[]> {
    return this.service.userSearchHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserSearchHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "own",
  })
  async userSearchHistory(
    @graphql.Args() args: UserSearchHistoryFindUniqueArgs
  ): Promise<UserSearchHistory | null> {
    const result = await this.service.userSearchHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserSearchHistory)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "create",
    possession: "any",
  })
  async createUserSearchHistory(
    @graphql.Args() args: CreateUserSearchHistoryArgs
  ): Promise<UserSearchHistory> {
    return await this.service.createUserSearchHistory({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserSearchHistory)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "update",
    possession: "any",
  })
  async updateUserSearchHistory(
    @graphql.Args() args: UpdateUserSearchHistoryArgs
  ): Promise<UserSearchHistory | null> {
    try {
      return await this.service.updateUserSearchHistory({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserSearchHistory)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "delete",
    possession: "any",
  })
  async deleteUserSearchHistory(
    @graphql.Args() args: DeleteUserSearchHistoryArgs
  ): Promise<UserSearchHistory | null> {
    try {
      return await this.service.deleteUserSearchHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: UserSearchHistory
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserSearchHistoryService } from "../userSearchHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserSearchHistoryCreateInput } from "./UserSearchHistoryCreateInput";
import { UserSearchHistory } from "./UserSearchHistory";
import { UserSearchHistoryFindManyArgs } from "./UserSearchHistoryFindManyArgs";
import { UserSearchHistoryWhereUniqueInput } from "./UserSearchHistoryWhereUniqueInput";
import { UserSearchHistoryUpdateInput } from "./UserSearchHistoryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserSearchHistoryControllerBase {
  constructor(
    protected readonly service: UserSearchHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSearchHistory })
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUserSearchHistory(
    @common.Body() data: UserSearchHistoryCreateInput
  ): Promise<UserSearchHistory> {
    return await this.service.createUserSearchHistory({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        searchIp: true,
        searchLocation: true,
        searchQuery: true,
        searchTimestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSearchHistory] })
  @ApiNestedQuery(UserSearchHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userSearchHistories(
    @common.Req() request: Request
  ): Promise<UserSearchHistory[]> {
    const args = plainToClass(UserSearchHistoryFindManyArgs, request.query);
    return this.service.userSearchHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        searchIp: true,
        searchLocation: true,
        searchQuery: true,
        searchTimestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async userSearchHistory(
    @common.Param() params: UserSearchHistoryWhereUniqueInput
  ): Promise<UserSearchHistory | null> {
    const result = await this.service.userSearchHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        searchIp: true,
        searchLocation: true,
        searchQuery: true,
        searchTimestamp: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUserSearchHistory(
    @common.Param() params: UserSearchHistoryWhereUniqueInput,
    @common.Body() data: UserSearchHistoryUpdateInput
  ): Promise<UserSearchHistory | null> {
    try {
      return await this.service.updateUserSearchHistory({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          searchIp: true,
          searchLocation: true,
          searchQuery: true,
          searchTimestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSearchHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "UserSearchHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUserSearchHistory(
    @common.Param() params: UserSearchHistoryWhereUniqueInput
  ): Promise<UserSearchHistory | null> {
    try {
      return await this.service.deleteUserSearchHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          searchIp: true,
          searchLocation: true,
          searchQuery: true,
          searchTimestamp: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt               DateTime                 @default(now())
  email                   String?                  @unique
  firstName               String?
  id                      String                   @id @default(cuid())
  lastName                String?
  password                String
  roles                   Json
  updatedAt               DateTime                 @updatedAt
  userFavoriteRestaurants UserFavoriteRestaurant[]
  userInteractions        UserInteraction[]
  username                String                   @unique
  userSearchHistories     UserSearchHistory[]
}

model Restaurant {
  affordability           String?
  contact                 String?
  createdAt               DateTime                 @default(now())
  createDate              DateTime?
  email                   String?
  fullAddress             String?
  id                      String                   @id @default(cuid())
  isRegistered            Boolean?
  latitude                Float?
  longitude               Float?
  name                    String?
  placeId                 String?
  rating                  Float?
  restaurantPhotos        RestaurantPhoto[]
  restaurantWorkingHours  RestaurantWorkingHour[]
  tags                    Tag[]
  totalReviews            Int?
  updatedAt               DateTime                 @updatedAt
  updateDate              DateTime?
  userFavoriteRestaurants UserFavoriteRestaurant[]
  userInteractions        UserInteraction[]
}

model RestaurantPhoto {
  createdAt    DateTime    @default(now())
  id           String      @id @default(cuid())
  photoUrl     Json?
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  updatedAt    DateTime    @updatedAt
}

model Tag {
  address        String?
  ambience       String?
  createdAt      DateTime    @default(now())
  id             String      @id @default(cuid())
  isCorrect      Boolean?
  mainTag        String?
  restaurant     Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId   String?
  restaurantName String?
  subTags        String?
  updatedAt      DateTime    @updatedAt
}

model UserSearchHistory {
  createdAt       DateTime  @default(now())
  id              String    @id @default(cuid())
  searchIp        String?
  searchLocation  String?
  searchQuery     String?
  searchTimestamp DateTime?
  updatedAt       DateTime  @updatedAt
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?
}

model UserFavoriteRestaurant {
  createdAt    DateTime    @default(now())
  createDate   DateTime?
  id           String      @id @default(cuid())
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  updatedAt    DateTime    @updatedAt
  updateDate   DateTime?
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?
}

model UserInteraction {
  createdAt            DateTime                            @default(now())
  deviceType           String?
  id                   String                              @id @default(cuid())
  interactionTimestamp DateTime?
  interactionType      EnumUserInteractionInteractionType?
  ipAddress            String?
  latitude             Float?
  longitude            Float?
  offerId              Int?
  restaurant           Restaurant?                         @relation(fields: [restaurantId], references: [id])
  restaurantId         String?
  updatedAt            DateTime                            @updatedAt
  user                 User?                               @relation(fields: [userId], references: [id])
  userId               String?
}

model RestaurantWorkingHour {
  closingTime  DateTime?
  createdAt    DateTime                            @default(now())
  dayOfWeek    EnumRestaurantWorkingHourDayOfWeek?
  id           String                              @id @default(cuid())
  isClosed     Boolean?
  openingTime  DateTime?
  restaurant   Restaurant?                         @relation(fields: [restaurantId], references: [id])
  restaurantId String?
  updatedAt    DateTime                            @updatedAt
}

model AppUser {
  accountStatus      EnumAppUserAccountStatus?
  address            String?
  authId             String?
  country            String?
  createdAt          DateTime                       @default(now())
  dateOfBirth        DateTime?
  email              String?
  gender             EnumAppUserGender?
  id                 String                         @id @default(cuid())
  languagePreference String?
  lastLogin          DateTime?
  latitude           Float?
  longitude          Float?
  name               String?
  password           String?
  phoneNumber        String?
  profilePictureUrl  String?
  timezone           String?
  updatedAt          DateTime                       @updatedAt
  userType           EnumAppUserUserType?
  verificationStatus EnumAppUserVerificationStatus?
}

enum EnumUserInteractionInteractionType {
  Option1
}

enum EnumRestaurantWorkingHourDayOfWeek {
  Option1
}

enum EnumAppUserAccountStatus {
  Option1
}

enum EnumAppUserGender {
  Option1
}

enum EnumAppUserUserType {
  Option1
}

enum EnumAppUserVerificationStatus {
  Option1
}
